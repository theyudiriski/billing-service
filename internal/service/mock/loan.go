// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/loan.go

// Package mock_billing is a generated GoMock package.
package mock_billing

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	service "github.com/theyudiriski/billing-service/internal/service"
)

// MockLoanService is a mock of LoanService interface.
type MockLoanService struct {
	ctrl     *gomock.Controller
	recorder *MockLoanServiceMockRecorder
}

// MockLoanServiceMockRecorder is the mock recorder for MockLoanService.
type MockLoanServiceMockRecorder struct {
	mock *MockLoanService
}

// NewMockLoanService creates a new mock instance.
func NewMockLoanService(ctrl *gomock.Controller) *MockLoanService {
	mock := &MockLoanService{ctrl: ctrl}
	mock.recorder = &MockLoanServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoanService) EXPECT() *MockLoanServiceMockRecorder {
	return m.recorder
}

// CreateLoan mocks base method.
func (m *MockLoanService) CreateLoan(ctx context.Context, borrowerID string, principalAmount service.Amount, interestRate float64, paymentFrequency service.LoanFrequency, totalPayments int) (*service.Loan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLoan", ctx, borrowerID, principalAmount, interestRate, paymentFrequency, totalPayments)
	ret0, _ := ret[0].(*service.Loan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLoan indicates an expected call of CreateLoan.
func (mr *MockLoanServiceMockRecorder) CreateLoan(ctx, borrowerID, principalAmount, interestRate, paymentFrequency, totalPayments interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLoan", reflect.TypeOf((*MockLoanService)(nil).CreateLoan), ctx, borrowerID, principalAmount, interestRate, paymentFrequency, totalPayments)
}

// GetOutstanding mocks base method.
func (m *MockLoanService) GetOutstanding(ctx context.Context, loanID string) (*service.OutstandingLoan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOutstanding", ctx, loanID)
	ret0, _ := ret[0].(*service.OutstandingLoan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOutstanding indicates an expected call of GetOutstanding.
func (mr *MockLoanServiceMockRecorder) GetOutstanding(ctx, loanID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOutstanding", reflect.TypeOf((*MockLoanService)(nil).GetOutstanding), ctx, loanID)
}

// GetTotalPending mocks base method.
func (m *MockLoanService) GetTotalPending(ctx context.Context, loanID string) (*service.PendingLoan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalPending", ctx, loanID)
	ret0, _ := ret[0].(*service.PendingLoan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalPending indicates an expected call of GetTotalPending.
func (mr *MockLoanServiceMockRecorder) GetTotalPending(ctx, loanID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalPending", reflect.TypeOf((*MockLoanService)(nil).GetTotalPending), ctx, loanID)
}

// IsDelinquent mocks base method.
func (m *MockLoanService) IsDelinquent(ctx context.Context, loanID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDelinquent", ctx, loanID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsDelinquent indicates an expected call of IsDelinquent.
func (mr *MockLoanServiceMockRecorder) IsDelinquent(ctx, loanID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDelinquent", reflect.TypeOf((*MockLoanService)(nil).IsDelinquent), ctx, loanID)
}

// PayLoan mocks base method.
func (m *MockLoanService) PayLoan(ctx context.Context, loanID string, payAmount service.Amount) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PayLoan", ctx, loanID, payAmount)
	ret0, _ := ret[0].(error)
	return ret0
}

// PayLoan indicates an expected call of PayLoan.
func (mr *MockLoanServiceMockRecorder) PayLoan(ctx, loanID, payAmount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PayLoan", reflect.TypeOf((*MockLoanService)(nil).PayLoan), ctx, loanID, payAmount)
}

// MockLoanStore is a mock of LoanStore interface.
type MockLoanStore struct {
	ctrl     *gomock.Controller
	recorder *MockLoanStoreMockRecorder
}

// MockLoanStoreMockRecorder is the mock recorder for MockLoanStore.
type MockLoanStoreMockRecorder struct {
	mock *MockLoanStore
}

// NewMockLoanStore creates a new mock instance.
func NewMockLoanStore(ctrl *gomock.Controller) *MockLoanStore {
	mock := &MockLoanStore{ctrl: ctrl}
	mock.recorder = &MockLoanStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoanStore) EXPECT() *MockLoanStoreMockRecorder {
	return m.recorder
}

// CreateLoan mocks base method.
func (m *MockLoanStore) CreateLoan(ctx context.Context, loan *service.Loan) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLoan", ctx, loan)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateLoan indicates an expected call of CreateLoan.
func (mr *MockLoanStoreMockRecorder) CreateLoan(ctx, loan interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLoan", reflect.TypeOf((*MockLoanStore)(nil).CreateLoan), ctx, loan)
}

// GetLoanByID mocks base method.
func (m *MockLoanStore) GetLoanByID(ctx context.Context, loanID string) (*service.Loan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoanByID", ctx, loanID)
	ret0, _ := ret[0].(*service.Loan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoanByID indicates an expected call of GetLoanByID.
func (mr *MockLoanStoreMockRecorder) GetLoanByID(ctx, loanID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoanByID", reflect.TypeOf((*MockLoanStore)(nil).GetLoanByID), ctx, loanID)
}

// GetOutstanding mocks base method.
func (m *MockLoanStore) GetOutstanding(ctx context.Context, loanID string) (*service.Amount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOutstanding", ctx, loanID)
	ret0, _ := ret[0].(*service.Amount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOutstanding indicates an expected call of GetOutstanding.
func (mr *MockLoanStoreMockRecorder) GetOutstanding(ctx, loanID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOutstanding", reflect.TypeOf((*MockLoanStore)(nil).GetOutstanding), ctx, loanID)
}

// GetTotalPending mocks base method.
func (m *MockLoanStore) GetTotalPending(ctx context.Context, loanID string) (*service.Amount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalPending", ctx, loanID)
	ret0, _ := ret[0].(*service.Amount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalPending indicates an expected call of GetTotalPending.
func (mr *MockLoanStoreMockRecorder) GetTotalPending(ctx, loanID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalPending", reflect.TypeOf((*MockLoanStore)(nil).GetTotalPending), ctx, loanID)
}

// IsDelinquent mocks base method.
func (m *MockLoanStore) IsDelinquent(ctx context.Context, userID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDelinquent", ctx, userID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsDelinquent indicates an expected call of IsDelinquent.
func (mr *MockLoanStoreMockRecorder) IsDelinquent(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDelinquent", reflect.TypeOf((*MockLoanStore)(nil).IsDelinquent), ctx, userID)
}

// MarkPendingAsPaid mocks base method.
func (m *MockLoanStore) MarkPendingAsPaid(ctx context.Context, loanID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkPendingAsPaid", ctx, loanID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkPendingAsPaid indicates an expected call of MarkPendingAsPaid.
func (mr *MockLoanStoreMockRecorder) MarkPendingAsPaid(ctx, loanID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkPendingAsPaid", reflect.TypeOf((*MockLoanStore)(nil).MarkPendingAsPaid), ctx, loanID)
}
